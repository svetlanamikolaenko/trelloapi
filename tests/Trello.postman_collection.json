{
	"info": {
		"_postman_id": "b05a7c2e-632c-4312-a34c-a3f4b31f5082",
		"name": "Trello",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get all boards",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{trelloAPIURL}}/1/members/{{userName}}/boards?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{trelloAPIURL}}"
					],
					"path": [
						"1",
						"members",
						"{{userName}}",
						"boards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.environment.set(\"trelloBoardid\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{trelloAPIURL}}/1/boards/?name={{boardName}}&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{trelloAPIURL}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{boardName}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create TODO List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Name to equal TODO\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.name).to.eql(pm.environment.get(\"TODOListName\"));\r",
							"});\r",
							"pm.test(\"Status to be not closed\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.closed).to.eql(false);\r",
							"});\r",
							"pm.environment.set(\"TODOListId\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{trelloAPIURL}}/1/lists/?key={{trelloKey}}&token={{trelloToken}}&idBoard={{trelloBoardid}}&name={{TODOListName}}",
					"host": [
						"{{trelloAPIURL}}"
					],
					"path": [
						"1",
						"lists",
						""
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "idBoard",
							"value": "{{trelloBoardid}}"
						},
						{
							"key": "name",
							"value": "{{TODOListName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create DONE List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Name to equal DONE\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.name).to.eql(pm.environment.get(\"DONEListName\"));\r",
							"});\r",
							"pm.test(\"Status to be not closed\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.closed).to.eql(false);\r",
							"});\r",
							"pm.test(\"Check creation Done List on correct Board\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.idBoard).to.eql(pm.environment.get(\"trelloBoardid\"));\r",
							"});\r",
							"pm.environment.set(\"DONEListId\", pm.response.json().id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{trelloAPIURL}}/1/lists/?key={{trelloKey}}&token={{trelloToken}}&idBoard={{trelloBoardid}}&name={{DONEListName}}",
					"host": [
						"{{trelloAPIURL}}"
					],
					"path": [
						"1",
						"lists",
						""
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "idBoard",
							"value": "{{trelloBoardid}}"
						},
						{
							"key": "name",
							"value": "{{DONEListName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status to be not closed\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.closed).to.eql(false);\r",
							"});\r",
							"pm.test(\"Name to equal That's a bug\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.name).to.eql(pm.environment.get(\"ThatsABugCardName\"));\r",
							"});\r",
							"pm.test(\"Created on correct list\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.idList).to.eql(pm.environment.get(\"TODOListId\"));\r",
							"});\r",
							"pm.test(\"Created on correct board\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.idBoard).to.eql(pm.environment.get(\"trelloBoardid\"));\r",
							"});\r",
							"pm.test(\"No votes nor attachments\", function () {\r",
							"    var badges = pm.response.json().badges;\r",
							"    pm.expect(badges.votes).to.eql(0);\r",
							"\r",
							"    const attachments = JSON.parse(badges.attachments);\r",
							"    for(attachment in attachments){\r",
							"        pm.expect(attachment.board).to.eql(0);\r",
							"        pm.expect(attachment.card).to.eql(0);\r",
							"    }\r",
							"});\r",
							"pm.environment.set(\"ThatsABugCardId\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{trelloAPIURL}}/1/cards?key={{trelloKey}}&token={{trelloToken}}&idList={{TODOListId}}&name={{ThatsABugCardName}}",
					"host": [
						"{{trelloAPIURL}}"
					],
					"path": [
						"1",
						"cards"
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						},
						{
							"key": "idList",
							"value": "{{TODOListId}}"
						},
						{
							"key": "name",
							"value": "{{ThatsABugCardName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Move card from TODO to DONE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Status to be not closed\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.closed).to.eql(false);\r",
							"});\r",
							"pm.test(\"Name to equal That's a bug\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.name).to.eql(pm.environment.get(\"ThatsABugCardName\"));\r",
							"});\r",
							"pm.test(\"Created on correct list\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.idList).to.eql(pm.environment.get(\"DONEListId\"));\r",
							"});\r",
							"pm.test(\"Created on correct board\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.idBoard).to.eql(pm.environment.get(\"trelloBoardid\"));\r",
							"});\r",
							"pm.test(\"No votes nor attachments\", function () {\r",
							"    var badges = pm.response.json().badges;\r",
							"    pm.expect(badges.votes).to.eql(0);\r",
							"\r",
							"    const attachments = JSON.parse(badges.attachments);\r",
							"    for(attachment in attachments){\r",
							"        pm.expect(attachment.board).to.eql(0);\r",
							"        pm.expect(attachment.card).to.eql(0);\r",
							"    }\r",
							"});\r",
							"pm.environment.set(\"ThatsABugCardId\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{trelloAPIURL}}/1/cards/{{ThatsABugCardId}}/?idList={{DONEListId}}&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{trelloAPIURL}}"
					],
					"path": [
						"1",
						"cards",
						"{{ThatsABugCardId}}",
						""
					],
					"query": [
						{
							"key": "idList",
							"value": "{{DONEListId}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Invalid - Move inexisted card Numeric ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"invalid id\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{trelloAPIURL}}/1/cards/2514/idList?value={{DONEListId}}&key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{trelloAPIURL}}"
					],
					"path": [
						"1",
						"cards",
						"2514",
						"idList"
					],
					"query": [
						{
							"key": "value",
							"value": "{{DONEListId}}"
						},
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Board id value should be null\", function () {\r",
							"    var data = pm.response.json();\r",
							"    pm.expect(data.value).to.eql(null);\r",
							"});\r",
							"pm.environment.set(\"trelloBoardid\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{trelloAPIURL}}/1/boards/{{trelloBoardid}}/?key={{trelloKey}}&token={{trelloToken}}",
					"host": [
						"{{trelloAPIURL}}"
					],
					"path": [
						"1",
						"boards",
						"{{trelloBoardid}}",
						""
					],
					"query": [
						{
							"key": "key",
							"value": "{{trelloKey}}"
						},
						{
							"key": "token",
							"value": "{{trelloToken}}"
						}
					]
				}
			},
			"response": []
		}
	]
}